Collection:
It represents the group of objects.
Its an interface which provides methods to work on group of objects

most common child classes-> ArrayList,LinkedList,HastSet

methods:
                1) size():int
                2) isEmpty():boolean
                3) contains():boolean  -----> serach an element in collection
                4) toArray()   --------> converst to an array
                5) add():void
                6) remove(indexArg:int):void
                   remove(element:object)
                7) addAll(arg:Collection)   ----> insert one collection into another
                8) removeAll(arg:Collection) ---> remove all elements from collections whic are present
                                  in collections
                9) clear()    ----> clesar all eleme
                10) equals()  -----> check if two collections are equal
                11) stream()  -----> THE GODFATHER  sbka baap
                12) iterator() ----> LEGACY BRO (:


Collection Vs Collections

Collection: its an interface and part of collection framework which exposes
            various methods implemented by various classes ArrayList,LinkedList

Collections: utility class gives some static methods for Collection to help in sorting,
             swappo9ng,searching,reverse,copy;

///////////////////////////////////////////////////////////////////////////////////////////////


Queue: child interface of Collection, follows FIFO inherits all methods of Collection + some
       specialized methods

       methods:
                 add()    succesfful? true: Exception  null element insertion will give NPE
                 offer()  successful? true: fALSE   null element insertion will give NPE
                 poll()   return & remove head of queue, returns null if q is empty
                 remove()  if q is empty returns NSE
                 peek()   returns head of queue, returns null if q is empty
                 element() returns head of q, returns NSE if q is empty

ArrayDeque/pq are not thread safe

but
PriorityBlockingQueue
ConcurrentLinkedDeque are

//////////////////////////////////////////////////////////////////////////////////////////////

List--> unlike queue, elements can be inserted ,removed from any positions

methods:
          add(index,element)
          addAll(index,Collection)
          replaceAll(UniaryOperator op) replaces each elemnt of list with res of applying the op of e
          sort(Comparator)
          get(index)
          set(index,e)
          remove(index)
          indexOf(Object o)      o?indx of first Ocuurence of o:-1
          lastIndexOf(Object o)  o?indx of last occurrence of o:-1
          ListIterator<E> listIterator() obj of ListIterator

                               <<ListIterator>> extends <<Iterator>> so it has all the methods of iterator

          ListIterator<E> listIterator(int index)   start iterator from specific index

          List<E> subList(int fromIndex,int toIndex)  returns a part of list

threaD SAFE variant  CopyOnWriteArrayList


///stack lifo   thread safe unlike deque

##################################TIME COMPLEXITY ##########################################

<<List>>

ArrayList
insertion       1) at end--> O(1)
                             if list is full  --> O(n)
                2) at index ---> O(n)
                3) at first ---> o(n)

deletion ------>O(n)

search   ------> get(index) -----> O(1)
                 indexOf()  -----> O(n)
                 contains() ------> O(n)  (implemented by indexof)

LinkedList
insertion       1) add() ---> O(1)
                2) add(indx,e) --> O(n)

searching       1) get()  ----> O(n)
                2) contains() ---> O(n)

remove          1) remove(index) ----> O(n)
                2) remove(element) ---> O(n)

*******************************************************************************************
<<Queue>>

PriorityQueue

1) insertion   1) add or offer -->O(logn)
2) remove      1) poll or remove --> O(logn)
3) Peek        O(1)

ArrayDeque

1) insertion    1) front or end  ----> O(1)
2) deletion     2) front or end  ----> O(1)
3) peek         O(1)
4) size         O(1)

PriorityBlockingQueue

1) insertion    1) front or end  ----> O(1)
2) deletion     2) front or end  ----> O(1)
3) peek         O(1)
4) size         O(1)

ConcurrentLinkedDeque

1) insertion    1) front or end  ----> O(1)
2) deletion     2) front or end  ----> O(1)
3) peek         O(1)
4) size         O(1)

**********************************************************************************************

Stack

insert  O(1)
deletion O(1)
search O(n)





